
<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('./components/head') %>
</head>
<body class="text-white">
    <%- include('./components/sidebar') %>

            <main class="flex-1 overflow-x-hidden overflow-y-auto">
                <div class="container mx-auto px-8 py-2">
                    <!-- Content -->

<main class="flex-grow container mx-auto px-4 py-8">
    <div class="flex justify-between items-center w-full mx-auto pb-4">
        <!-- Welcome text and subtext on the left -->
        <div class="flex flex-col">
            <h1 class="text-xl font-semibold mb-0.5" style="font-family: 'Cabin';">Staking</h1>
            <p class="text-gray-400 text-md">Invest your <%= settings.coinname %> by staking and earn rewards each day.</p>
        </div>

        <!-- Breadcrumbs on the right -->
        <nav aria-label="Breadcrumb" class="border border-white/15 inline-flex py-2 px-4 rounded-full bg-white/5 shadow hover:bg-white/10 transition-colors duration-200">
            <ol role="list" class="flex items-center space-x-2">
                <li>
                    <a href="/dashboard" class="text-sm flex items-center gap-2 text-zinc-400 hover:text-zinc-200 transition-colors duration-200" aria-current="false">
                        <svg
                            aria-hidden="true"
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            class="icon icon-tabler size-4 icons-tabler-outline icon-tabler-home"
                        >
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                            <path d="M5 12l-2 0l9 -9l9 9l-2 0"></path>
                            <path d="M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7"></path>
                            <path d="M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6"></path>
                        </svg>
                        <span>Home</span>
                    </a>
                </li>
                <li class="flex items-center">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-right size-4 text-zinc-400"
                    >
                        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                        <path d="M9 6l6 6l-6 6"></path>
                    </svg>
                </li>
                <li>
                    <a href="#_" class="text-sm flex items-center gap-2 font-medium text-white/80 hover:text-white transition-colors duration-200" aria-current="page">
                        Staking
                    </a>
                </li>
            </ol>
        </nav>
    </div>

    <div class="bg-yellow-800/30 mt-5 text-yellow-300 p-4 rounded-2xl" role="alert">
        <div class="flex items-center">
          <div class="py-1">
            <svg class="fill-current h-6 w-6 text-yellow-500 mr-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
              <path d="M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0 4.34 4.34a8 8 0 0 0 11.32 11.32zM9 11V9h2v6H9v-4zm0-6h2v2H9V5z"/>
            </svg>
          </div>
          <div>
            <p class="font-bold">This feature is still in beta phrase</p>
            <p class="text-sm">Please do not use it. as it is not working.</p>
          </div>
        </div>
      </div>

    <div class="max-w-4xl mx-auto mt-5">
        <!-- Header with balance overview -->
        <header class="bg-white/5 rounded-2xl p-6 mb-8">
            <div class="flex justify-between items-center">
                <div>
                    <p class="text-gray-400 text-sm">Total Balance</p>
                    <p class="text-3xl font-bold"><%= coins %> <%= settings.coinname %></p>
                </div>
                <div class="text-right">
                    <p class="text-gray-400 text-sm">Staked Balance</p>
                    <p class="text-xl font-semibold" id="staking-balance">Loading...</p>
                </div>
            </div>
        </header>

        <div class="grid gap-8 md:grid-cols-3">
            <!-- Staking Stats -->
            <div class="col-span-2 bg-white/5 rounded-2xl p-6">
                <h2 class="text-xl font-semibold mb-4">Staking Stats</h2>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <p class="text-gray-400 text-sm">APY</p>
                        <p class="text-lg font-medium">5%</p>
                    </div>
                    <div>
                        <p class="text-gray-400 text-sm">Total Earnings</p>
                        <p class="text-lg font-medium" id="total-earnings">-</p>
                    </div>
                    <div>
                        <p class="text-gray-400 text-sm">Last Stake</p>
                        <p class="text-lg font-medium" id="last-stake-time">-</p>
                    </div>
                    <div>
                        <p class="text-gray-400 text-sm">Pending Rewards</p>
                        <p class="text-lg font-medium" id="pending-rewards">-</p>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="bg-white/5 rounded-2xl p-6">
                <h2 class="text-xl font-semibold mb-4">Quick Actions</h2>
                <div class="space-y-4">
                    <button id="stake-btn" class="w-full px-4 py-2 bg-orange-600 text-white rounded-xl font-medium hover:bg-orange-700 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-orange-500">
                        Stake <%= settings.coinname %>
                    </button>
                    <button id="unstake-btn" class="w-full px-4 py-2 bg-white/10 text-white rounded-xl font-medium hover:bg-white/20 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-white/50">
                        Unstake <%= settings.coinname %>
                    </button>
                    <button id="claim-rewards" class="w-full px-4 py-2 bg-white/10 text-white rounded-xl font-medium hover:bg-white/20 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-white/50">
                        Claim Rewards
                    </button>
                </div>
            </div>
        </div>

        <!-- Staking History -->
        <div class="mt-8 hidden bg-white/5 border border-white/10 rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-4">Staking History</h2>
            <div class="overflow-x-auto">
                <table class="w-full text-left">
                    <thead>
                        <tr class="text-gray-400 text-sm">
                            <th class="pb-3">Date</th>
                            <th class="pb-3">Type</th>
                            <th class="pb-3">Amount</th>
                            <th class="pb-3">Status</th>
                        </tr>
                    </thead>
                    <tbody id="staking-history">
                        <!-- Staking history will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

<!-- Updated Modal HTML -->
<div id="action-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden opacity-0 transition-all duration-300 ease-in-out scale-95">
    <div class="bg-[#191c20] rounded-lg p-6 w-full max-w-md transform transition-all duration-300 ease-in-out scale-95">
        <h3 id="modal-title" class="text-xl font-semibold mb-4"></h3>
        <form id="action-form">
            <div class="mb-4">
                <label for="action-amount" class="block text-sm font-medium text-gray-400 mb-1">Amount</label>
                <input type="number" id="action-amount" required min="0" step="0.01"
                       class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-md text-white focus:ring-orange-500 focus:border-orange-500">
            </div>
            <div class="flex justify-end space-x-3">
                <button type="button" id="cancel-action" class="px-4 py-2 bg-white/10 text-white rounded-full font-medium hover:bg-white/20 transition-colors duration-200">
                    Cancel
                </button>
                <button type="submit" id="confirm-action" class="px-4 py-2 bg-orange-600 text-white rounded-full font-medium hover:bg-orange-700 transition-colors duration-200">
                    Confirm
                </button>
            </div>
        </form>
    </div>
</div>
</main>

<script>
    const actionModal = document.getElementById('action-modal');
    const modalTitle = document.getElementById('modal-title');
    const actionForm = document.getElementById('action-form');
    const actionAmount = document.getElementById('action-amount');
    let currentAction = '';

    async function fetchStakingInfo() {
        try {
            const response = await fetch('/stake/balance');
            const data = await response.json();

            if (data) {
                document.getElementById('total-balance').textContent = `98.31344635416633 PlutoCoins`;
                document.getElementById('staking-balance').textContent = `${data.staked.toFixed(2)} PlutoCoins`;
                document.getElementById('total-earnings').textContent = `${data.earnings.toFixed(2)} PlutoCoins`;
                document.getElementById('last-stake-time').textContent = new Date(data.lastStakeTime).toLocaleString();
                document.getElementById('pending-rewards').textContent = `${data.earnings.toFixed(2)} PlutoCoins`;
            } else {
                document.getElementById('total-balance').textContent = 'Error fetching data';
            }
        } catch (error) {
            document.getElementById('total-balance').textContent = 'Error fetching data';
        }
    }

    async function handleStakeUnstake(action) {
        const amount = actionAmount.value;
        try {
            const response = await fetch(`/${action}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ amount: parseFloat(amount) })
            });
            const data = await response.json();
            if (response.ok) {
                alert(`Successfully ${action}d ${amount} PlutoCoins`);
                fetchStakingInfo();
                updateStakingHistory();
                closeModal();
            } else {
                alert(`Error: ${data.error}`);
            }
        } catch (error) {
            alert(`An error occurred while ${action}ing`);
        }
    }

    async function handleClaimRewards() {
        try {
            const response = await fetch('/stake/claim', { method: 'POST' });
            const data = await response.json();
            if (response.ok) {
                alert(`Successfully claimed ${data.claimedAmount.toFixed(2)} PlutoCoins in rewards`);
                fetchStakingInfo();
                updateStakingHistory();
            } else {
                alert(`Error: ${data.error}`);
            }
        } catch (error) {
            alert('An error occurred while claiming rewards');
        }
    }

    function openModal(action) {
        currentAction = action;
        modalTitle.textContent = `${action.charAt(0).toUpperCase() + action.slice(1)} PlutoCoins`;
        actionModal.classList.remove('hidden');
        setTimeout(() => {
            actionModal.classList.remove('opacity-0', 'scale-95');
            modalContent.classList.remove('scale-95');
        }, 10);
    }

    function closeModal() {
        actionModal.classList.add('opacity-0', 'scale-95');
        modalContent.classList.add('scale-95');
        setTimeout(() => {
            actionModal.classList.add('hidden');
            actionForm.reset();
        }, 300);
    }

    async function updateStakingHistory() {
        try {
            const response = await fetch('/stake/history');
            const history = await response.json();
            const historyTable = document.getElementById('staking-history');
            historyTable.innerHTML = history.map(item => `
                <tr>
                    <td class="py-2">${new Date(item.date).toLocaleString()}</td>
                    <td class="py-2">${item.type}</td>
                    <td class="py-2">${item.amount.toFixed(2)} PlutoCoins</td>
                    <td class="py-2">${item.status}</td>
                </tr>
            `).join('');
        } catch (error) {
            console.error('Error fetching staking history:', error);
        }
    }

    document.getElementById('stake-btn').addEventListener('click', () => openModal('stake'));
    document.getElementById('unstake-btn').addEventListener('click', () => openModal('unstake'));
    document.getElementById('claim-rewards').addEventListener('click', handleClaimRewards);
    document.getElementById('cancel-action').addEventListener('click', closeModal);

    actionForm.addEventListener('submit', (e) => {
        e.preventDefault();
        handleStakeUnstake(currentAction);
    });

    fetchStakingInfo();
    updateStakingHistory();
    setInterval(fetchStakingInfo, 60000); // Refresh every minute
</script>


        <!-- Footer -->
        <footer class="py-4">
            <div class="container mx-auto px-4 text-center text-gray-400 text-sm">
                <span>© 2017 - 2024 SRYDEN, Inc.</span>
            </div>
        </footer>
    </div>

    <script>
        // Function to highlight the active tab
        function setActiveTab() {
            const currentPath = window.location.pathname;
            const tabs = document.querySelectorAll('#tabs a');
            tabs.forEach(tab => {
                if (tab.getAttribute('href') === currentPath) {
                    tab.classList.add('border-orange-500', 'text-orange-500', 'font-medium');
                    tab.classList.remove('border-transparent', 'hover:border-gray-300', 'hover:text-white');
                } else {
                    tab.classList.remove('border-orange-500', 'text-orange-500', 'font-medium');
                    tab.classList.add('border-transparent', 'hover:border-gray-300', 'hover:text-white');
                }
            });
        }

        // Set active tab on page load
        setActiveTab();

        // For demonstration purposes, simulate changing routes when clicking tabs
        document.querySelectorAll('#tabs a').forEach(tab => {
            tab.addEventListener('click', (e) => {
                e.preventDefault();
                const href = e.currentTarget.getAttribute('href');
                history.pushState(null, '', href);
                window.location.href = href;
                setActiveTab();
            });
        });

        // Listen for popstate events (back/forward browser navigation)
        window.addEventListener('popstate', setActiveTab);
    </script>
</body>
</html>
<script>
    var options = {
      classname: 'loadingbar',
      id: 'loadingbar'
    };
    var nanobar = new Nanobar(options);
    function simulateLoading() {
      nanobar.go(10); // Change this value to control the loading speed
      setTimeout(function() {
        nanobar.go(50);
      }, 190); // Delay the progress update
      setTimeout(function() {
        nanobar.go(100);
      }, 400); // Another delay
    }
    simulateLoading();
  </script>
  <style>
    .loadingbar .bar {
      background: #fb923c;
      -webkit-box-shadow: 0px 4px 38px -15px #fb923c;
      -moz-box-shadow: 0px 4px 38px -15px #fb923c;
      box-shadow: 0px 4px 38px -15px #fb923c;
      height: 1.85px;
    }
  </style>